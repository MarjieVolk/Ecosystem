//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34003
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using UnityEngine;
using System.Collections;
using System.Collections.Generic;
using Assets.Alleles;
using Assets;
using Assets.Alleles.FunctionalAlleles;

public class ReproductionAllele : Allele
{
	[GeneticallyInheritable]
	public String EnergyStoreGene;

	[GeneticallyInheritable]
	public int maxPollenTravelDistance;

	[GeneticallyInheritable]
	public int maxSeedTravelDistance;

	[GeneticallyInheritable]
	public double pollenEnergyCost;

	[GeneticallyInheritable]
	public double seedEnergyCost;

	private System.Random gen;
	private List<Dictionary<string, Allele>> pollen;
	private DoubleResourceStore energy;
	private Genome myGenome;

	void Start () {
		pollen = new List<Dictionary<string, Allele>>();
		gen = new System.Random();

		myGenome = this.gameObject.GetComponent<Genome>();
		energy = ((DoubleResourceStoreAllele) myGenome.GetActiveAllele(EnergyStoreGene)).Store;
	}

	void Update() {
		if (!IsActive) return;

		if (pollen.Count > 0) {
			if (energy.Amount >= seedEnergyCost * 2) {
				//make seed
				Tile[] possibleTiles = TileManager.instance.getTilesInRange(transform.position, maxPollenTravelDistance);
				Tile t = possibleTiles[gen.Next(possibleTiles.GetLength(0))];

				if (!t.hasPlant()) {
					//TODO: make plant
					GameObject child = GameObject.CreatePrimitive(PrimitiveType.Capsule);
					child.transform.position = t.transform.position;
					child.transform.localScale = this.transform.localScale;
					child.renderer.material = this.renderer.material;

					Dictionary<string, Allele> pieceOfPollen = pollen[0];
					pollen.Remove(pieceOfPollen);

					Genome childGenome = (Genome) child.AddComponent("Genome");
					childGenome.init(pieceOfPollen, myGenome.getHalfGenome());

					t.Plant = child;
				}

				energy.removeResource(seedEnergyCost);
			}

		} else if (energy.Amount >= pollenEnergyCost * 2) {
			//make pollen
			Tile[] possibleTiles = TileManager.instance.getTilesInRange(transform.position, maxSeedTravelDistance);
			Tile t = possibleTiles[gen.Next(possibleTiles.GetLength(0))];

			if (t.hasPlant()) {
				ReproductionAllele other = (ReproductionAllele) t.Plant.GetComponent<Genome>().GetActiveAllele(this.gene);
				other.getPollen(myGenome.getHalfGenome());
			}

			energy.removeResource(pollenEnergyCost);
		}
	}

	public void getPollen(Dictionary<string, Allele> halfGenome) {
		// When a new child plant gets placed on a tile, its Start method doesn't get called until the end of the Update round
		// in which is was created.  Therefore other plants can attempt to pollinate it before "pollen" gets initialized.
		// This is acceptable because if the plant wasn't there, the pollen would get bought and not used anyway
		if (pollen != null) {
			pollen.Add(halfGenome);
		}
	}
}

