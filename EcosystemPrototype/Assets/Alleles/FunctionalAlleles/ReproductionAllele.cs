//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34003
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using UnityEngine;
using System.Collections;
using System.Collections.Generic;
using Assets.Alleles;
using Assets;
using Assets.Alleles.FunctionalAlleles;

public class ReproductionAllele : Allele
{
	public String energyStore;
	
	public int maxPollenTravelDistance;
	public int maxSeedTravelDistance;

	public double pollenEnergyCost;
	public double seedEnergyCost;

	private System.Random gen;
	private List<Dictionary<string, Allele>> pollen;
	private DoubleResourceStore energy;
	private Genome genome;

	void Start () {
		pollen = new List<Dictionary<string, Allele>>();
		gen = new System.Random();

		genome = this.gameObject.GetComponent<Genome>();
		energy = ((DoubleResourceStoreAllele) genome.GetActiveAllele(energyStore)).Store;
	}

	void Update() {
		if (pollen.Count > 0 && energy.Amount >= seedEnergyCost) {
			//make seed
			Tile[] possibleTiles = TileManager.instance.getTilesInRange(transform.position, maxSeedTravelDistance);
			Tile t = possibleTiles[gen.Next(possibleTiles.GetLength(0))];

			if (!t.hasPlant()) {
				//TODO: make plant
				GameObject child = GameObject.CreatePrimitive(PrimitiveType.Capsule);
				child.transform.position = t.transform.position;
				child.transform.localScale = this.transform.localScale;
				child.renderer.material = this.renderer.material;

				Dictionary<string, Allele> pieceOfPollen = pollen[0];
				pollen.Remove(pieceOfPollen);

				Genome childGenome = (Genome) child.AddComponent("Genome");
				childGenome.init(pieceOfPollen, genome.getHalfGenome());

				t.Plant = child;
			}

			energy.removeResource(seedEnergyCost);

		} else if (energy.Amount >= pollenEnergyCost) {
			//make pollen
			Tile[] possibleTiles = TileManager.instance.getTilesInRange(transform.position, maxSeedTravelDistance);
			Tile t = possibleTiles[gen.Next(possibleTiles.GetLength(0))];

			if (t.hasPlant()) {
				ReproductionAllele other = (ReproductionAllele) t.Plant.GetComponent<Genome>().GetActiveAllele(this.gene);
				other.getPollen(genome.getHalfGenome());
			}

			energy.removeResource(pollenEnergyCost);
		}
	}

	public void getPollen(Dictionary<string, Allele> halfGenome) {
		pollen.Add(halfGenome);
	}
}

